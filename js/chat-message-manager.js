// chat-message-manager.js
import { db } from './firebase-init.js';
import {
  chatMessagesElement,
  messageInput
} from './dom-elements.js';
import {
  getCurrentUserId,
  getCurrentUsername
} from './auth-service.js';
import {
  getCurrentChatId,
  getCurrentChatMode
} from './chat-list-manager.js';
import {
  getPendingMediaFiles,
  clearPendingMediaFiles,
  hideMediaPreviewContainer,
  createDownloadMenu,
  downloadDocument,
  resizeImageToBase64
} from './utils.js';

let selectedMessages = new Set(); // Keep selected messages state here for now

function clearChatMessages() {
  chatMessagesElement.innerHTML = '';
}

// chat-message-manager.js
// ... (–∏–º–ø–æ—Ä—Ç—ã –∏ –∫–æ–¥ –¥–æ displayMessage) ...

function displayMessage(message, isMe, prepend = false) {
  const messageElement = document.createElement('div');
  messageElement.classList.add('message');
  messageElement.classList.add(isMe ? 'me' : 'other');
  messageElement.dataset.messageId = message.id;

  const messageBubble = document.createElement('div');
  messageBubble.classList.add('message-bubble');

  let contentHtml = '';
  const hasText = message.text && message.text.trim() !== '';
  const hasImages = message.imageDatas && message.imageDatas.length > 0;
  const hasDocuments = message.documents && message.documents.length > 0;

  if (!isMe && getCurrentChatMode() !== 'private_chat' && message.senderId !== getCurrentUserId()) {
    contentHtml += `<div class="message-author">${message.senderName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}</div>`;
  }

  if (hasText) {
    contentHtml += `<div class="message-text">${message.text}</div>`;
  }

  if (hasText && (hasImages || hasDocuments)) {
    contentHtml += `<div class="message-media-separator"></div>`;
  }

  if (hasImages) {
    contentHtml += `<div class="message-images">`;
    message.imageDatas.forEach(imageData => {
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞–µ–º message.id –∏ Base64-—Å—Ç—Ä–æ–∫—É –≤ createDownloadMenu
      // createDownloadMenu –¥–æ–ª–∂–Ω–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ—Ç Base64 –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.
      // –í–∞–∂–Ω–æ: –µ—Å–ª–∏ createDownloadMenu –æ–∂–∏–¥–∞–µ—Ç –º–∞—Å—Å–∏–≤, —Ç–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å [imageData]
      contentHtml += `<img src="${imageData}" alt="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" ondblclick="window.createDownloadMenu('${message.id}', ['${imageData}'], [])">`;
    });
    // –ë–ª–æ–∫ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å imageUrls (–µ—Å–ª–∏ —Ç–∞–∫–∏–µ –µ—â–µ –µ—Å—Ç—å)
    // –ï—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Firebase Storage, —ç—Ç–æ—Ç –±–ª–æ–∫ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.
    if (message.imageUrls && message.imageUrls.length > 0) {
      message.imageUrls.forEach(imageUrl => {
        contentHtml += `<img src="${imageUrl}" alt="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" ondblclick="window.createDownloadMenu('${message.id}', [], ['${imageUrl}'])">`;
      });
    }
    contentHtml += `</div>`;
  }

  if (hasDocuments) {
    contentHtml += `<div class="message-documents">`;
    message.documents.forEach(doc => {
      // –î–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ Base64: —Å–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é.
      // createDownloadMenu –Ω–µ –Ω—É–∂–Ω–∞ –¥–ª—è –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏.
      contentHtml += `<a href="${doc.url}" download="${doc.name}" class="document-link">
                               <span class="file-icon">üìÑ</span> ${doc.name}
                           </a>`;
    });
    contentHtml += `</div>`;
  }

  contentHtml += `<span class="message-time">${new Date(message.time).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</span>`;

  if (isMe) {
    contentHtml += `<span class="delete-btn" onclick="window.deleteMessage('${message.id}')">‚úï</span>`;
  }

  messageBubble.innerHTML = contentHtml;
  messageElement.appendChild(messageBubble);

  messageElement.addEventListener('click', (event) => {
    if (!isMe) return;
    event.stopPropagation();
    toggleMessageSelection(message.id);
  });

  if (prepend) {
    chatMessagesElement.prepend(messageElement);
  } else {
    chatMessagesElement.appendChild(messageElement);
    chatMessagesElement.scrollTop = chatMessagesElement.scrollHeight;
  }
}

// ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ sendMessage, deleteMessage, toggleMessageSelection, export) ...

async function sendMessage() {
    const messageText = messageInput.value.trim();
    const pendingMediaFiles = getPendingMediaFiles();

    if (!messageText && pendingMediaFiles.length === 0) {
        alert("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã.");
        return;
    }

    if (!getCurrentUserId() || !getCurrentUsername()) {
        alert("–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.");
        return;
    }

    let messageData = {
        senderId: getCurrentUserId(),
        senderName: getCurrentUsername(),
        time: firebase.database.ServerValue.TIMESTAMP
    };

    if (messageText) {
        messageData.text = messageText;
    }

    messageData.imageDatas = []; // –î–ª—è Base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–≤–∫–ª—é—á–∞—è GIF)
    messageData.documents = [];   // –î–ª—è Base64 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–∏–º—è + –¥–∞–Ω–Ω—ã–µ)

    const fileProcessingPromises = [];

    for (const item of pendingMediaFiles) {
        const file = item.file; // –ü–æ–ª—É—á–∞–µ–º —Å–∞–º –æ–±—ä–µ–∫—Ç File

        if (file.type.startsWith('image/')) {
            if (file.type === 'image/gif') {
                // –î–õ–Ø GIF-–§–ê–ô–õ–û–í: –ß–∏—Ç–∞–µ–º –∫–∞–∫ Data URL –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
                fileProcessingPromises.push(new Promise((resolve, reject) => {
                    const reader = new FileReader();
                    reader.readAsDataURL(file); // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ Base64
                    reader.onload = (event) => {
                        messageData.imageDatas.push(event.target.result); // –î–æ–±–∞–≤–ª—è–µ–º Base64 GIF
                        resolve();
                    };
                    reader.onerror = (error) => {
                        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ GIF –≤ Base64:", error);
                        reject(error);
                    };
                }).catch(error => { // –õ–æ–≤–∏–º –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞
                    alert(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å GIF ${file.name}: ${error.message}`);
                    throw error; // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                }));
            } else {
                // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (JPEG, PNG –∏ —Ç.–¥.): –∏—Å–ø–æ–ª—å–∑—É–µ–º resizeImageToBase64
                fileProcessingPromises.push(
                    resizeImageToBase64(file, 800, 600)
                    .then(resizedBase64 => {
                        messageData.imageDatas.push(resizedBase64);
                    })
                    .catch(error => {
                        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Base64:", error);
                        alert(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${file.name}: ${error.message}`);
                        throw error;
                    })
                );
            }
        } else {
            // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤): —á–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ Data URL (Base64)
            fileProcessingPromises.push(new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.readAsDataURL(file);
                reader.onload = (event) => {
                    messageData.documents.push({
                        name: file.name,
                        url: event.target.result // Base64 –¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞
                    });
                    resolve();
                };
                reader.onerror = (error) => {
                    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ Base64:", error);
                    reject(error);
                };
            }).catch(error => {
                alert(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç ${file.name}: ${error.message}`);
                throw error;
            }));
        }
    }

    try {
        await Promise.all(fileProcessingPromises);

        if (messageData.imageDatas.length === 0 && messageData.documents.length === 0 && !messageData.text) {
             alert("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –Ω–∏ –æ–¥–∏–Ω —Ñ–∞–π–ª –Ω–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ –∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.");
             return;
        }

        let messagesRef;
        const currentChatMode = getCurrentChatMode();
        const currentChatId = getCurrentChatId();

        if (currentChatMode === 'group') {
            messagesRef = db.ref(`chat_messages/group/${currentChatId}`);
        } else if (currentChatMode === 'channel') {
            messagesRef = db.ref(`chat_messages/channel/${currentChatId}`);
        } else if (currentChatMode === 'private_chat') {
            messagesRef = db.ref(`chat_messages/private_chat/${currentChatId}`);
        } else if (currentChatMode === 'user' && currentChatId === getCurrentUserId()) {
            messagesRef = db.ref(`chat_messages/private_chat/${[getCurrentUserId(), getCurrentUserId()].sort().join('_')}`);
        } else {
            alert("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.");
            return;
        }

        await messagesRef.push(messageData);

        messageInput.value = '';
        clearPendingMediaFiles();
        hideMediaPreviewContainer();
        selectedMessages.clear();
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–¥–∏–∞:", error);
        alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: " + error.message);
    }
}

// ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ displayMessage, deleteMessage, toggleMessageSelection, export) ...
function deleteMessage(messageId) {
  const currentChatMode = getCurrentChatMode();
  const currentChatId = getCurrentChatId();
  let messagePath;

  if (currentChatMode === 'group') {
    messagePath = `chat_messages/group/${currentChatId}/${messageId}`;
  } else if (currentChatMode === 'channel') {
    messagePath = `chat_messages/channel/${currentChatId}/${messageId}`;
  } else if (currentChatMode === 'private_chat') {
    messagePath = `chat_messages/private_chat/${currentChatId}/${messageId}`;
  } else {
    alert("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ–º —Ç–∏–ø–µ —á–∞—Ç–∞.");
    return;
  }

  db.ref(messagePath).once('value', (snapshot) => {
    const message = snapshot.val();
    if (message && message.senderId === getCurrentUserId()) {
      if (confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ?")) {
        db.ref(messagePath).remove()
          .then(() => {
            console.log("–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.");
          })
          .catch(error => {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
            alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: " + error.message);
          });
      }
    } else {
      alert("–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.");
    }
  });
}

function toggleMessageSelection(messageId) {
  const messageElement = document.querySelector(`[data-message-id="${messageId}"]`);
  if (!messageElement) return;

  if (selectedMessages.has(messageId)) {
    selectedMessages.delete(messageId);
    messageElement.classList.remove('selected');
  } else {
    selectedMessages.add(messageId);
    messageElement.classList.add('selected');
  }
}

export { clearChatMessages, displayMessage, sendMessage, deleteMessage };